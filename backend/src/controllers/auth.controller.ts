/**
 * Authentication Controller
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Login, Logout, ‡πÅ‡∏•‡∏∞ Refresh Token
 */

import { Request, Response } from 'express';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import prisma from '../utils/prisma';
import { generateToken, generateRefreshToken, TokenPayload } from '../utils/jwt';

/**
 * Login - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö username/password ‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å JWT token
 * POST /api/auth/login
 * Body: { username: string, password: string }
 */
export const login = async (req: Request, res: Response): Promise<void> => {
  try {
    const { username, password } = req.body;

    // üêõ DEBUG: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• request
    console.log('üîê Login Request:', {
      username,
      origin: req.headers.origin,
      userAgent: req.headers['user-agent'],
      ip: req.ip || req.socket.remoteAddress,
      timestamp: new Date().toISOString(),
    });

    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ username ‡πÅ‡∏•‡∏∞ password ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!username || !password) {
      console.log('‚ùå Login Failed: Missing credentials');
      res.status(400).json({
        error: 'Bad Request',
        message: 'Please provide username and password',
      });
      return;
    }

    // 2. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ user ‡∏à‡∏≤‡∏Å database
    const user = await prisma.user.findUnique({
      where: { username },
      select: {
        id: true,
        username: true,
        email: true,
        password: true,
        fullName: true,
        role: true,
        isActive: true,
      },
    });

    // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!user) {
      console.log('‚ùå Login Failed: User not found -', username);
      res.status(401).json({
        error: 'Unauthorized',
        message: 'Invalid username or password',
      });
      return;
    }

    // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡∏ñ‡∏π‡∏Å active ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!user.isActive) {
      console.log('‚ùå Login Failed: User inactive -', username);
      res.status(401).json({
        error: 'Unauthorized',
        message: 'Account is inactive. Please contact administrator',
      });
      return;
    }

    // 5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö password (‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö password ‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡∏Å‡∏±‡∏ö hash ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)
    const isPasswordValid = await bcrypt.compare(password, user.password);

    if (!isPasswordValid) {
      console.log('‚ùå Login Failed: Invalid password -', username);
      res.status(401).json({
        error: 'Unauthorized',
        message: 'Invalid username or password',
      });
      return;
    }

    // 6. ‡∏™‡∏£‡πâ‡∏≤‡∏á JWT tokens
    const tokenPayload = {
      id: user.id,
      username: user.username,
      role: user.role,
    };
    
    const token = generateToken(tokenPayload);
    const refreshToken = generateRefreshToken(tokenPayload);

    console.log('‚úÖ Login Success:', {
      userId: user.id,
      username: user.username,
      role: user.role,
      tokenExpiresIn: '30 minutes',
      refreshTokenExpiresIn: '7 days',
    });

    // 7. ‡∏™‡πà‡∏á response ‡∏û‡∏£‡πâ‡∏≠‡∏° tokens ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user (‡πÑ‡∏°‡πà‡∏™‡πà‡∏á password)
    res.status(200).json({
      message: '‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      token,
      refreshToken,
      expiresIn: 1800, // 30 ‡∏ô‡∏≤‡∏ó‡∏µ (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
      user: {
        id: user.id,
        username: user.username,
        email: user.email,
        fullName: user.fullName,
        role: user.role,
      },
    });
  } catch (error) {
    console.error('‚ùå Login error:', error);
    res.status(500).json({
      error: 'Internal Server Error',
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö',
    });
  }
};

/**
 * Get Current User - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏ó‡∏µ‡πà login ‡∏≠‡∏¢‡∏π‡πà
 * GET /api/auth/me
 * Headers: Authorization: Bearer <token>
 */
export const getCurrentUser = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    // req.user ‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÇ‡∏î‡∏¢ authenticate middleware
    if (!req.user) {
      res.status(401).json({
        error: 'Unauthorized',
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤ login ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
      });
      return;
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
    const user = await prisma.user.findUnique({
      where: { id: req.user.id },
      select: {
        id: true,
        username: true,
        email: true,
        fullName: true,
        role: true,
        isActive: true,
        createdAt: true,
      },
    });

    if (!user) {
      res.status(404).json({
        error: 'Not Found',
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
      });
      return;
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    res.status(200).json(user);
  } catch (error) {
    console.error('‚ùå Get current user error:', error);
    res.status(500).json({
      error: 'Internal Server Error',
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ',
    });
  }
};

/**
 * Logout - ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
 * POST /api/auth/logout
 * 
 * ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö JWT ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£ logout ‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡∏ö‡∏ô server
 * Client ‡∏à‡∏∞‡∏•‡∏ö token ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å localStorage
 * ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ implement blacklist token ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
 */
/**
 * Refresh Token - ‡πÉ‡∏ä‡πâ refresh token ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á access token ‡πÉ‡∏´‡∏°‡πà
 * POST /api/auth/refresh
 * Body: { refreshToken: string }
 */
export const refreshToken = async (req: Request, res: Response): Promise<void> => {
  try {
    const { refreshToken } = req.body;

    if (!refreshToken) {
      res.status(400).json({
        error: 'Bad Request',
        message: 'Please provide refresh token',
      });
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö refresh token
    const JWT_SECRET = process.env.JWT_SECRET;
    if (!JWT_SECRET) {
      throw new Error('JWT_SECRET is not defined in environment variables');
    }

    let decoded;
    try {
      decoded = jwt.verify(refreshToken, JWT_SECRET) as TokenPayload;
    } catch (error) {
      res.status(401).json({
        error: 'Unauthorized',
        message: 'Invalid or expired refresh token',
      });
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ user ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á active ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const user = await prisma.user.findUnique({
      where: { id: decoded.id },
      select: {
        id: true,
        username: true,
        email: true,
        fullName: true,
        role: true,
        isActive: true,
      },
    });

    if (!user || !user.isActive) {
      res.status(401).json({
        error: 'Unauthorized',
        message: 'Account is inactive',
      });
      return;
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á access token ‡πÉ‡∏´‡∏°‡πà
    const newToken = generateToken({
      id: user.id,
      username: user.username,
      role: user.role,
    });

    console.log('‚úÖ Token Refreshed:', {
      userId: user.id,
      username: user.username,
    });

    res.status(200).json({
      message: '‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      token: newToken,
      expiresIn: 1800, // 30 ‡∏ô‡∏≤‡∏ó‡∏µ
      user: {
        id: user.id,
        username: user.username,
        email: user.email,
        fullName: user.fullName,
        role: user.role,
      },
    });
  } catch (error) {
    console.error('‚ùå Refresh token error:', error);
    res.status(500).json({
      error: 'Internal Server Error',
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡πÉ‡∏´‡∏°‡πà',
    });
  }
};

export const logout = async (req: Request, res: Response): Promise<void> => {
  try {
    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö JWT ‡∏õ‡∏Å‡∏ï‡∏¥‡∏à‡∏∞‡πÉ‡∏´‡πâ client ‡∏•‡∏ö token ‡πÄ‡∏≠‡∏á
    // ‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏≤‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å logout event ‡∏•‡∏á database (optional)
    
    res.status(200).json({
      message: 'Logout successful',
    });
  } catch (error) {
    console.error('‚ùå Logout error:', error);
    res.status(500).json({
      error: 'Internal Server Error',
      message: 'Failed to logout',
    });
  }
};

/**
 * Update Language Preference
 * PUT /api/auth/language
 * Body: { language: string }
 */
export const updateLanguage = async (
  req: Request,
  res: Response
): Promise<void> => {
  try {
    const { language } = req.body;
    const userId = req.user?.id;

    if (!['en', 'th', 'zh'].includes(language)) {
      res.status(400).json({
        error: 'Bad Request',
        message: 'Invalid language code',
      });
      return;
    }

    await prisma.user.update({
      where: { id: userId },
      data: { language },
    });

    res.status(200).json({
      message: 'Language updated successfully',
      data: { language },
    });
  } catch (error) {
    console.error('Update language error:', error);
    res.status(500).json({
      error: 'Internal Server Error',
      message: 'Failed to update language',
    });
  }
};

