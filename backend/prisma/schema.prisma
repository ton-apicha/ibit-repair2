generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  username      String         @unique
  password      String
  fullName      String
  email         String?
  phone         String?
  role          Role           @default(TECHNICIAN)
  language      String         @default("th") // "en" | "th" | "zh"
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  activityLogs  ActivityLog[]
  jobsCreated   Job[]          @relation("CreatedBy")
  jobsAssigned  Job[]          @relation("AssignedTechnician")
  refreshTokens RefreshToken[]
  transactions  Transaction[]

  @@index([role])
  @@index([isActive])
  @@index([createdAt])
  @@map("users")
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Customer {
  id          String   @id @default(cuid())
  fullName    String
  phone       String   @unique
  email       String?
  address     String?
  taxId       String?
  companyName String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  jobs        Job[]

  @@index([fullName])
  @@index([phone])
  @@index([email])
  @@index([createdAt])
  @@map("customers")
}

model Brand {
  id        String       @id @default(uuid())
  name      String       @unique
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  models    MinerModel[]

  @@map("brands")
}

model MinerModel {
  id          String   @id @default(cuid())
  brandId     String
  modelName   String
  hashrate    String?
  powerUsage  String?
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  jobs        Job[]
  brand       Brand    @relation(fields: [brandId], references: [id])

  @@unique([brandId, modelName])
  @@map("miner_models")
}

model Part {
  id          String    @id @default(uuid())
  partNumber  String    @unique
  partName    String
  description String?
  unitPrice   Decimal   @db.Decimal(10, 2)
  stockQty    Int       @default(0)
  minStockQty Int       @default(0)
  location    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  jobParts    JobPart[]

  @@map("parts")
}

model Job {
  id                 String           @id @default(cuid())
  jobNumber          String           @unique
  customerId         String
  minerModelId       String
  serialNumber       String?
  password           String?
  status             JobStatus        @default(RECEIVED)
  priority           Int              @default(0)
  warrantyProfileId  String?
  problemDescription String
  customerNotes      String?
  receivedDate       DateTime         @default(now())
  estimatedDoneDate  DateTime?
  completedDate      DateTime?
  technicianId       String?
  createdById        String
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  activityLogs       ActivityLog[]
  images             JobImage[]
  jobParts           JobPart[]
  createdBy          User             @relation("CreatedBy", fields: [createdById], references: [id])
  customer           Customer         @relation(fields: [customerId], references: [id])
  minerModel         MinerModel       @relation(fields: [minerModelId], references: [id])
  technician         User?            @relation("AssignedTechnician", fields: [technicianId], references: [id])
  warrantyProfile    WarrantyProfile? @relation(fields: [warrantyProfileId], references: [id])
  quotations         Quotation[]
  repairRecords      RepairRecord[]
  transactions       Transaction[]

  @@index([status])
  @@index([priority])
  @@index([customerId])
  @@index([technicianId])
  @@index([receivedDate])
  @@index([createdAt])
  @@index([status, priority])
  @@map("jobs")
}

model RepairRecord {
  id          String   @id @default(cuid())
  jobId       String
  description String
  findings    String?
  actions     String?
  createdBy   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  job         Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("repair_records")
}

model JobPart {
  id        String   @id @default(cuid())
  jobId     String
  partId    String
  quantity  Int
  unitPrice Decimal  @db.Decimal(10, 2)
  notes     String?
  createdAt DateTime @default(now())
  job       Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  part      Part     @relation(fields: [partId], references: [id])

  @@map("job_parts")
}

model JobImage {
  id        String    @id @default(uuid())
  jobId     String
  imageUrl  String
  imageType ImageType @default(OTHER)
  caption   String?
  createdAt DateTime  @default(now())
  job       Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@map("job_images")
}

model Quotation {
  id           String          @id @default(cuid())
  jobId        String
  quotationNo  String          @unique
  laborCost    Decimal         @db.Decimal(10, 2)
  partsCost    Decimal         @db.Decimal(10, 2)
  otherCost    Decimal         @default(0) @db.Decimal(10, 2)
  discount     Decimal         @default(0) @db.Decimal(10, 2)
  totalAmount  Decimal         @db.Decimal(10, 2)
  vat          Decimal         @default(0) @db.Decimal(10, 2)
  grandTotal   Decimal         @db.Decimal(10, 2)
  status       QuotationStatus @default(PENDING)
  notes        String?
  validUntil   DateTime?
  approvedAt   DateTime?
  approvedBy   String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  job          Job             @relation(fields: [jobId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("quotations")
}

model Transaction {
  id             String          @id @default(cuid())
  jobId          String
  quotationId    String?
  type           TransactionType
  amount         Decimal         @db.Decimal(10, 2)
  paymentMethod  String?
  paymentStatus  PaymentStatus   @default(PENDING)
  receiptNo      String?         @unique
  notes          String?
  paidAt         DateTime?
  recordedBy     String
  createdAt      DateTime        @default(now())
  job            Job             @relation(fields: [jobId], references: [id], onDelete: Cascade)
  quotation      Quotation?      @relation(fields: [quotationId], references: [id])
  recordedByUser User            @relation(fields: [recordedBy], references: [id])

  @@map("transactions")
}

model WarrantyProfile {
  id            String   @id @default(cuid())
  name          String   @unique
  durationDays  Int
  description   String?
  terms         String?
  laborWarranty Boolean  @default(true)
  partsWarranty Boolean  @default(true)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  jobs          Job[]

  @@map("warranty_profiles")
}

model ActivityLog {
  id          String   @id @default(cuid())
  jobId       String?
  userId      String
  action      String
  description String?
  metadata    Json?
  createdAt   DateTime @default(now())
  job         Job?     @relation(fields: [jobId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id])

  @@map("activity_logs")
}

model SystemSettings {
  id        String   @id @default(cuid())
  shopName  String   @default("IBIT Repair")
  address   String?
  phone     String?
  email     String?
  logoUrl   String?
  taxId     String?
  updatedAt DateTime @updatedAt

  @@map("system_settings")
}

enum Role {
  ADMIN
  MANAGER
  TECHNICIAN
  RECEPTIONIST
}

enum JobStatus {
  RECEIVED
  DIAGNOSED
  WAITING_APPROVAL
  IN_REPAIR
  WAITING_PARTS
  TESTING
  READY_FOR_PICKUP
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum ImageType {
  BEFORE
  DURING
  AFTER
  PROBLEM
  OTHER
}

enum QuotationStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

enum TransactionType {
  DEPOSIT
  PAYMENT
  REFUND
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIAL
  CANCELLED
}
